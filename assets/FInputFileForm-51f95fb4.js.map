{"version":3,"file":"FInputFileForm-51f95fb4.js","sources":["../../../fui/src/material/FInputFileForm/FInputFileForm.tsx"],"sourcesContent":["import React, {FC, useEffect, useRef} from 'react';\nimport \"./FInputFileForm.css\"\n\nexport interface IFInputFileForm {\n    id?: string,\n    className?: string,\n    st?: React.CSSProperties,\n    dataMaxSize?: {\n        dimension: 'МБ' | 'КБ',\n        size: number\n    },\n    name?: string,\n    accept?: string,\n    multiple?: boolean,\n    onChange: (e: FileList) => void,\n    disabled?: boolean,\n    deleteFile?: boolean,\n    title?: string,\n    required?: boolean,\n}\n\nconst FInputFileForm: FC<IFInputFileForm> = ({\n                                                 id,\n                                                 className,\n                                                 st,\n                                                 dataMaxSize,\n                                                 name,\n                                                 accept,\n                                                 multiple = false,\n                                                 onChange,\n                                                 disabled = false,\n                                                 deleteFile,\n                                                 title,\n                                                 required\n                                             }) => {\n\n    let disabledColor: {\n        customFileLabel: React.CSSProperties | undefined,\n        svgIcon: React.CSSProperties | undefined,\n        span: React.CSSProperties | undefined,\n        b: React.CSSProperties | undefined,\n    } = {\n        customFileLabel: undefined,\n        svgIcon: undefined,\n        span: undefined,\n        b: undefined,\n    }\n\n    if (disabled) {\n        disabledColor = {\n            customFileLabel: {\n                backgroundColor: '#F3F3F3',\n                borderRadius: '8px',\n                border: '1px dashed #C4C4C4'\n            },\n            svgIcon: {\n                color: '#888888'\n            },\n            span: {\n                color: '#C4C4C4'\n            },\n            b: {\n                color: '#888888'\n            }\n        }\n    }\n\n    const inputRef = useRef<{\n        value: null | undefined\n    }>({\n        value: undefined\n    });\n\n    useEffect(() => {\n        if (deleteFile) {\n            inputRef.current.value = null\n        }\n    }, [deleteFile])\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"custom-file custom-file-dropzone\"\n                style={st}\n            >\n                <input\n                    required={required}\n                    accept={accept}\n                    type=\"file\"\n                    className={`custom-file-input ${className !== undefined ? className : ''}`}\n                    name={name}\n                    id={id}\n                    title={title}\n                    data-max-size={dataMaxSize?.size}\n                    multiple={multiple}\n                    onChange={(e) => {\n\n                        if (e.target.files && e.target.files[0]) {\n\n                            let maximumSize: number | undefined = undefined\n\n                            if (dataMaxSize?.dimension === 'МБ') {\n                                maximumSize = dataMaxSize.size * 1024 * 1024 // Перевод из мегабайт в байты\n                            } else if (dataMaxSize?.dimension === 'КБ') (\n                                maximumSize = dataMaxSize.size * 1024 // Перевод из килобайт в байты\n                            )\n                            if (maximumSize !== undefined) {\n                                const dt = new DataTransfer()\n                                Object.values(e.target.files).forEach((file) => {\n                                    //@ts-ignore\n                                    if (file.size <= maximumSize) dt.items.add(file)\n                                })\n                                onChange(dt.files)\n                            } else {\n                                onChange(e.target.files)\n                            }\n                        }\n                    }}\n                    disabled={disabled}\n                    //@ts-ignore\n                    ref={inputRef}\n                />\n                <label\n                    className=\"custom-file-label\"\n                    style={disabledColor.customFileLabel}\n                >\n                    <svg\n                        className=\"svg-icon icon-md\"\n                        focusable=\"false\"\n                        role=\"img\"\n                        viewBox=\"0 0 36 35\"\n                        style={disabledColor.svgIcon}\n                    >\n                        <path\n                            d=\"M19.035 16.465a1.458 1.458 0 0 0-2.041 0l-4.376 4.229a1.459 1.459 0 1 0 2.013 2.1l1.91-1.852v8.225a1.458 1.458 0 1 0 2.917 0v-8.152l1.881 1.895a1.459 1.459 0 0 0 2.071 0 1.457 1.457 0 0 0 0-2.07l-4.375-4.375z\"/>\n                        <path\n                            d=\"M26.269 10.208a8.75 8.75 0 0 0-16.538 0 7.292 7.292 0 0 0-4.491 12.06 1.457 1.457 0 1 0 2.187-1.851 4.375 4.375 0 0 1 3.282-7.292h.145a1.458 1.458 0 0 0 1.459-1.167 5.833 5.833 0 0 1 11.433 0 1.458 1.458 0 0 0 1.458 1.167h.088a4.376 4.376 0 0 1 3.281 7.292 1.457 1.457 0 0 0 .131 2.07 1.458 1.458 0 0 0 1.563.235c.189-.085.357-.21.494-.366a7.292 7.292 0 0 0-4.492-12.148z\"/>\n                    </svg>\n                    <br/>\n                    <span style={disabledColor.span}>\n                        <b style={disabledColor.b}>Выберите</b> или переместите файл для загрузки<br/> <small>Максимальный\n                    размер {dataMaxSize?.size} {dataMaxSize?.dimension}</small>\n                    </span>\n                </label>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default FInputFileForm;"],"names":["FInputFileForm","id","className","st","dataMaxSize","name","accept","multiple","onChange","disabled","deleteFile","title","required","disabledColor","inputRef","useRef","useEffect","jsx","React","jsxs","e","maximumSize","dt","file","FInputFileForm$1"],"mappings":"oGAqBA,MAAAA,EAAA,CAAA,CAA6C,GAAAC,EACI,UAAAC,EACA,GAAAC,EACA,YAAAC,EACA,KAAAC,EACA,OAAAC,EACA,SAAAC,EAAA,GACW,SAAAC,EACX,SAAAC,EAAA,GACW,WAAAC,EACX,MAAAC,EACA,SAAAC,CAEJ,IAAA,CAEzC,IAAAC,EAAA,CAKI,gBAAA,OACiB,QAAA,OACR,KAAA,OACH,EAAA,MACH,EAGPJ,IACII,EAAA,CAAgB,gBAAA,CACK,gBAAA,UACI,aAAA,MACH,OAAA,oBACN,EACZ,QAAA,CACS,MAAA,SACE,EACX,KAAA,CACM,MAAA,SACK,EACX,EAAA,CACG,MAAA,SACQ,CACX,GAIR,MAAAC,EAAAC,EAAAA,OAAA,CAEG,MAAA,MACQ,CAAA,EAGXC,OAAAA,EAAAA,UAAA,IAAA,CACIN,IACII,EAAA,QAAA,MAAA,KACJ,EAAA,CAAAJ,CAAA,CAAA,EAGJO,EAAAC,EAAA,SAAA,CAAA,SAAAC,EAEQ,MAAC,CAAA,UAAA,mCACa,MAAAhB,EACH,SAAA,CAEPc,EAAA,QAAC,CAAA,SAAAL,EACG,OAAAN,EACA,KAAA,OACK,UAAA,qBAAAJ,IAAA,OAAAA,EAAA,EAAA,GACmE,KAAAG,EACxE,GAAAJ,EACA,MAAAU,EACA,gBAAAP,GAAA,YAAAA,EAAA,KAC4B,SAAAG,EAC5B,SAAAa,GAAA,CAGI,GAAAA,EAAA,OAAA,OAAAA,EAAA,OAAA,MAAA,CAAA,EAAA,CAEI,IAAAC,EAOA,IALAjB,GAAA,YAAAA,EAAA,aAAA,KACIiB,EAAAjB,EAAA,KAAA,KAAA,MAAwCA,GAAA,YAAAA,EAAA,aAAA,OACAiB,EAAAjB,EAAA,KAAA,MAG5CiB,IAAA,OAAA,CACI,MAAAC,EAAA,IAAA,aACA,OAAA,OAAAF,EAAA,OAAA,KAAA,EAAA,QAAAG,GAAA,CAEIA,EAAA,MAAAF,GAA8BC,EAAA,MAAA,IAAAC,CAAA,CAAiB,CAAA,EAEnDf,EAAAc,EAAA,KAAA,CAAiB,MAEjBd,EAAAY,EAAA,OAAA,KAAA,CACJ,CACJ,EACJ,SAAAX,EACA,IAAAK,CAEK,CAAA,EACTK,EACA,QAAC,CAAA,UAAA,oBACa,MAAAN,EAAA,gBACW,SAAA,CAErBM,EAAA,MAAC,CAAA,UAAA,mBACa,UAAA,QACA,KAAA,MACL,QAAA,YACG,MAAAN,EAAA,QACa,SAAA,CAErBI,EAAA,OAAC,CAAA,EAAA,kNACK,CAAA,EAAkNA,EACxN,OAAC,CAAA,EAAA,qXACK,CAAA,CAAqX,CAAA,CAAA,EAC/XA,EAAA,KAAA,EAAA,EACGE,EAAA,OAAA,CAAA,MAAAN,EAAA,KAAA,SAAA,CAECI,EAAA,IAAA,CAAA,MAAAJ,EAAA,EAAA,SAAA,WAAA,EAAmC,qCAAII,EAAA,KAAA,EAAA,EAAqC,IAAEE,EAAA,QAAA,CAAA,SAAA,CAAQ,uBAAAf,GAAA,YAAAA,EAAA,KACrE,IAAKA,GAAA,YAAAA,EAAA,SAAe,EAAA,CAAU,EAAA,CACnD,CAAA,CAAA,CACJ,CAAA,CAAA,CAAA,CAAA,CAIhB,EAEAoB,EAAAxB"}