{"version":3,"file":"FPagination-90c139ef.js","sources":["../../../fui/src/material/FPagination/hooks/usePagination.tsx","../../../fui/src/material/FPagination/FPagination.tsx"],"sourcesContent":["import React, {FC} from 'react';\nimport {useMemo} from 'react';\n\nexport const DOTS = '...';\n\nconst range = (start: number, end: number) => {\n    let length = end - start + 1;\n    return Array.from({length}, (_, idx) => idx + start);\n};\n\ninterface IProps {\n    currentPage: number,\n    totalCount: number,\n    pageSize: number,\n    siblingCount: number,\n}\n\nexport const usePagination = ({\n                                  totalCount,\n                                  pageSize,\n                                  siblingCount = 1,\n                                  currentPage\n                              }: IProps) => {\n\n    const paginationRange = useMemo(() => {\n        const totalPageCount = Math.ceil(totalCount / pageSize);\n\n        const totalPageNumbers = siblingCount + 5;\n\n        if (totalPageNumbers >= totalPageCount) {\n            return range(1, totalPageCount);\n        }\n\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n        const rightSiblingIndex = Math.min(\n            currentPage + siblingCount,\n            totalPageCount\n        );\n\n        const shouldShowLeftDots = leftSiblingIndex > 2;\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n        const firstPageIndex = 1;\n        const lastPageIndex = totalPageCount;\n\n        if (!shouldShowLeftDots && shouldShowRightDots) {\n            let leftItemCount = 3 + 2 * siblingCount;\n            let leftRange = range(1, leftItemCount);\n\n            return [...leftRange, DOTS, totalPageCount];\n        }\n\n        if (shouldShowLeftDots && !shouldShowRightDots) {\n            let rightItemCount = 3 + 2 * siblingCount;\n            let rightRange = range(\n                totalPageCount - rightItemCount + 1,\n                totalPageCount\n            );\n            return [firstPageIndex, DOTS, ...rightRange];\n        }\n\n        if (shouldShowLeftDots && shouldShowRightDots) {\n            let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n        }\n    }, [totalCount, pageSize, siblingCount, currentPage]);\n\n    return paginationRange;\n};\n","import React, {FC} from 'react';\nimport {usePagination, DOTS} from './hooks/usePagination';\nimport \"./FPagination.css\"\n\nexport interface IFPagination {\n    currentPage: number,\n    totalCount: number,\n    pageSize: number,\n    onPageChange: (page: number | string | number) => void,\n    id?: string,\n    className?: string,\n    st?: React.CSSProperties | undefined\n    siblingCount: 0 | 1 | 2\n}\n\nconst FPagination: FC<IFPagination> = ({\n                                           currentPage,\n                                           totalCount,\n                                           pageSize,\n                                           onPageChange,\n                                           id,\n                                           className,\n                                           st,\n                                           siblingCount\n                                       }) => {\n\n    const paginationRange = usePagination({\n        currentPage,\n        totalCount,\n        siblingCount,\n        pageSize\n    });\n\n    // @ts-ignore\n    if (currentPage === 0 || paginationRange.length < 2) {\n        return null;\n    }\n\n    const onNext = () => {\n        onPageChange(currentPage + 1);\n    };\n\n    const onPrevious = () => {\n        onPageChange(currentPage - 1);\n    };\n\n    // @ts-ignore\n    let lastPage = paginationRange[paginationRange.length - 1];\n\n    return (\n        <React.Fragment>\n            <ul\n                className={`pagination-container ${className !== undefined ? className : ''}`}\n                style={st}\n                id={`${id !== undefined ? id : ''}`}\n            >\n                <li\n                    className={`pagination-item ${currentPage === 1 ? 'disabled' : ''}`}\n                    onClick={onPrevious}\n                >\n                    <div className=\"arrow left\"/>\n                </li>\n                {/*@ts-ignore*/}\n                {paginationRange.map(pageNumber => {\n                    if (pageNumber === DOTS) {\n                        return <li className=\"pagination-item dots\">&#8230;</li>;\n                    }\n\n                    return (\n                        <li\n                            className={`pagination-item ${pageNumber === currentPage ? 'selected' : ''}`}\n                            id={'test-id'}\n                            onClick={() => onPageChange(pageNumber)}\n                        >\n                            {pageNumber}\n                        </li>\n                    );\n                })}\n                <li\n                    className={`pagination-item ${currentPage === lastPage ? 'disabled' : ''}`}\n                    onClick={onNext}\n                >\n                    <div className=\"arrow right\"/>\n                </li>\n            </ul>\n        </React.Fragment>\n    );\n};\n\nexport default FPagination;\n"],"names":["DOTS","range","start","end","length","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","useMemo","totalPageCount","leftSiblingIndex","rightSiblingIndex","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","rightItemCount","rightRange","middleRange","FPagination","onPageChange","id","className","st","paginationRange","onNext","onPrevious","lastPage","jsx","React","jsxs","pageNumber","FPagination$1"],"mappings":"oGAGO,MAAAA,EAAA,MAEPC,EAAA,CAAAC,EAAAC,IAAA,CACI,IAAAC,EAAAD,EAAAD,EAAA,EACA,OAAA,MAAA,KAAA,CAAA,OAAAE,CAAA,EAAA,CAAAC,EAAAC,IAAAA,EAAAJ,CAAA,CACJ,EASOK,EAAA,CAAA,CAAuB,WAAAC,EACI,SAAAC,EACA,aAAAC,EAAA,EACe,YAAAC,CAEnB,IAE1BC,EAAAA,QAAA,IAAA,CACI,MAAAC,EAAA,KAAA,KAAAL,EAAAC,CAAA,EAIA,GAFAC,EAAA,GAEAG,EACI,OAAAZ,EAAA,EAAAY,CAAA,EAGJ,MAAAC,EAAA,KAAA,IAAAH,EAAAD,EAAA,CAAA,EACAK,EAAA,KAAA,IAA+BJ,EAAAD,EACbG,CACd,EAGJG,EAAAF,EAAA,EACAG,EAAAF,EAAAF,EAAA,EAEAK,EAAA,EACAC,EAAAN,EAEA,GAAA,CAAAG,GAAAC,EAAA,CACI,IAAAG,EAAA,EAAA,EAAAV,EAGA,MAAA,CAAA,GAFAT,EAAA,EAAAmB,CAAA,EAEApB,EAAAa,CAAA,CAA0C,CAG9C,GAAAG,GAAA,CAAAC,EAAA,CACI,IAAAI,EAAA,EAAA,EAAAX,EACAY,EAAArB,EAAiBY,EAAAQ,EAAA,EACqBR,CAClC,EAEJ,MAAA,CAAAK,EAAAlB,EAAA,GAAAsB,CAAA,CAA2C,CAG/C,GAAAN,GAAAC,EAAA,CACI,IAAAM,EAAAtB,EAAAa,EAAAC,CAAA,EACA,MAAA,CAAAG,EAAAlB,EAAA,GAAAuB,EAAAvB,EAAAmB,CAAA,CAAiE,CACrE,EAAA,CAAAX,EAAAC,EAAAC,EAAAC,CAAA,CAAA,4fCjDR,MAAAa,EAAA,CAAA,CAAuC,YAAAb,EACI,WAAAH,EACA,SAAAC,EACA,aAAAgB,EACA,GAAAC,EACA,UAAAC,EACA,GAAAC,EACA,aAAAlB,CAEJ,IAAA,CAEnC,MAAAmB,EAAAtB,EAAA,CAAsC,YAAAI,EAClC,WAAAH,EACA,aAAAE,EACA,SAAAD,CACA,CAAA,EAIJ,GAAAE,IAAA,GAAAkB,EAAA,OAAA,EACI,OAAA,KAGJ,MAAAC,EAAA,IAAA,CACIL,EAAAd,EAAA,CAAA,CAA4B,EAGhCoB,EAAA,IAAA,CACIN,EAAAd,EAAA,CAAA,CAA4B,EAIhC,IAAAqB,EAAAH,EAAAA,EAAA,OAAA,CAAA,EAEA,OAAAI,EAAAC,EAAA,SAAA,CAAA,SAAAC,EAEQ,KAAC,CAAA,UAAA,wBAAAR,IAAA,OAAAA,EAAA,EAAA,GAC8E,MAAAC,EACpE,GAAA,GAAAF,IAAA,OAAAA,EAAA,EAAA,GAC0B,SAAA,CAEjCO,EAAA,KAAC,CAAA,UAAA,mBAAAtB,IAAA,EAAA,WAAA,EAAA,GACoE,QAAAoB,EACxD,SAAAE,EAAA,MAAA,CAAA,UAAA,YAAA,CAAA,CAEkB,CAAA,EAC/BJ,EAAA,IAAAO,GAGIA,IAAApC,EACIiC,EAAA,KAAA,CAAA,UAAA,uBAAA,SAAA,GAAA,CAAA,EAGJA,EACI,KAAC,CAAA,UAAA,mBAAAG,IAAAzB,EAAA,WAAA,EAAA,GAC6E,GAAA,UACtE,QAAA,IAAAc,EAAAW,CAAA,EACkC,SAAAA,CAErC,CAAA,CACL,EAEPH,EACD,KAAC,CAAA,UAAA,mBAAAtB,IAAAqB,EAAA,WAAA,EAAA,GAC2E,QAAAF,EAC/D,SAAAG,EAAA,MAAA,CAAA,UAAA,aAAA,CAAA,CAEmB,CAAA,CAChC,CAAA,CAAA,CAAA,CAAA,CAIhB,EAEAI,EAAAb"}